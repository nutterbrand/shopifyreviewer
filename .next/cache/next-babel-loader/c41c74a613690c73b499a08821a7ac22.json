{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from \"react\"; // nodejs library to set properties for components\n\n// nodejs library that concatenates classes\nimport classNames from \"classnames\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\"; // @material-ui/icons\n\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport styles from \"assets/jss/nextjs-material-kit-pro/components/customInputStyle.js\";\nconst useStyles = makeStyles(styles);\nexport default function CustomInput(props) {\n  const {\n    formControlProps,\n    labelText,\n    id,\n    labelProps,\n    inputProps,\n    error,\n    white,\n    inputRootCustomClasses,\n    success\n  } = props;\n  const classes = useStyles();\n  const labelClasses = classNames({\n    [\" \" + classes.labelRootError]: error,\n    [\" \" + classes.labelRootSuccess]: success && !error\n  });\n  const underlineClasses = classNames({\n    [classes.underlineError]: error,\n    [classes.underlineSuccess]: success && !error,\n    [classes.underline]: true,\n    [classes.whiteUnderline]: white\n  });\n  const marginTop = classNames({\n    [inputRootCustomClasses]: inputRootCustomClasses !== undefined\n  });\n  const inputClasses = classNames({\n    [classes.input]: true,\n    [classes.whiteInput]: white\n  });\n  var formControlClasses;\n\n  if (formControlProps !== undefined) {\n    formControlClasses = classNames(formControlProps.className, classes.formControl);\n  } else {\n    formControlClasses = classes.formControl;\n  }\n\n  return __jsx(FormControl, _extends({}, formControlProps, {\n    className: formControlClasses\n  }), labelText !== undefined ? __jsx(InputLabel, _extends({\n    className: classes.labelRoot + \" \" + labelClasses,\n    htmlFor: id\n  }, labelProps), labelText) : null, __jsx(Input, _extends({\n    classes: {\n      input: inputClasses,\n      root: marginTop,\n      disabled: classes.disabled,\n      underline: underlineClasses\n    },\n    id: id\n  }, inputProps)), error ? __jsx(Clear, {\n    className: classes.feedback + \" \" + classes.labelRootError\n  }) : success ? __jsx(Check, {\n    className: classes.feedback + \" \" + classes.labelRootSuccess\n  }) : null);\n}","map":null,"metadata":{},"sourceType":"module"}