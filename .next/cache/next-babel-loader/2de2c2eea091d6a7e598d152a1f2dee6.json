{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from \"react\"; // used for making the prop types of this component\n\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\"; // core components\n\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport styles from \"assets/jss/nextjs-material-kit-pro/components/customFileInputStyle.js\";\nvar useStyles = makeStyles(styles);\nexport default function CustomFileInput(props) {\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fileNames = _React$useState2[0],\n      setFileNames = _React$useState2[1]; // eslint-disable-next-line\n\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      files = _React$useState4[0],\n      setFiles = _React$useState4[1];\n\n  var hiddenFile = React.createRef();\n\n  var onFocus = function onFocus(e) {\n    hiddenFile.current.click(e);\n  }; // eslint-disable-next-line\n\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault(); // files is the file/image uploaded\n    // in this function you can save the image (files) on form submit\n    // you have to call it yourself\n  };\n\n  var addFile = function addFile(e) {\n    var fileNames = \"\";\n    var files = e.target.files;\n\n    for (var i = 0; i < e.target.files.length; i++) {\n      fileNames = fileNames + e.target.files[i].name;\n\n      if (props.multiple && i !== e.target.files.length - 1) {\n        fileNames = fileNames + \", \";\n      }\n    }\n\n    setFiles(files);\n    setFileNames(fileNames);\n  };\n\n  var id = props.id,\n      endButton = props.endButton,\n      startButton = props.startButton,\n      inputProps = props.inputProps,\n      formControlProps = props.formControlProps,\n      multiple = props.multiple;\n  var classes = useStyles();\n\n  if (inputProps && inputProps.type && inputProps.type === \"file\") {\n    inputProps.type = \"text\";\n  }\n\n  var buttonStart;\n  var buttonEnd;\n\n  if (startButton) {\n    buttonStart = __jsx(Button, startButton.buttonProps, startButton.icon !== undefined ? startButton.icon : null, startButton.text !== undefined ? startButton.text : null);\n  }\n\n  if (endButton) {\n    buttonEnd = __jsx(Button, endButton.buttonProps, endButton.icon !== undefined ? endButton.icon : null, endButton.text !== undefined ? endButton.text : null);\n  }\n\n  return __jsx(\"div\", {\n    className: classes.inputFileWrapper\n  }, __jsx(\"input\", {\n    type: \"file\",\n    className: classes.inputFile,\n    multiple: multiple,\n    ref: hiddenFile,\n    onChange: addFile\n  }), __jsx(CustomInput, {\n    id: id,\n    formControlProps: _objectSpread({}, formControlProps),\n    inputProps: _objectSpread({}, inputProps, {\n      onClick: onFocus,\n      value: fileNames,\n      endAdornment: buttonEnd,\n      startAdornment: buttonStart\n    })\n  }));\n}\nCustomFileInput.defaultProps = {\n  multiple: false\n};","map":null,"metadata":{},"sourceType":"module"}