{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport cx from \"classnames\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport styles from \"assets/jss/nextjs-material-kit-pro/components/tableStyle.js\";\nconst useStyles = makeStyles(styles);\nexport default function CustomTable(props) {\n  const {\n    tableHead,\n    tableData,\n    tableHeaderColor,\n    hover,\n    colorsColls,\n    coloredColls,\n    customCellClasses,\n    customClassesForCells,\n    striped,\n    tableShopping,\n    customHeadCellClasses,\n    customHeadClassesForCells\n  } = props;\n  const classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.tableResponsive\n  }, __jsx(Table, {\n    className: classes.table\n  }, tableHead !== undefined ? __jsx(TableHead, {\n    className: classes[tableHeaderColor]\n  }, __jsx(TableRow, {\n    className: classes.tableRow\n  }, tableHead.map((prop, key) => {\n    const tableCellClasses = classes.tableHeadCell + \" \" + classes.tableCell + \" \" + cx({\n      [customHeadCellClasses[customHeadClassesForCells.indexOf(key)]]: customHeadClassesForCells.indexOf(key) !== -1,\n      [classes.tableShoppingHead]: tableShopping\n    });\n    return __jsx(TableCell, {\n      className: tableCellClasses,\n      key: key\n    }, prop);\n  }))) : null, __jsx(TableBody, null, tableData.map((prop, key) => {\n    var rowColor = \"\";\n    var rowColored = false;\n\n    if (prop.color !== undefined) {\n      rowColor = prop.color;\n      rowColored = true;\n      prop = prop.data;\n    }\n\n    const tableRowClasses = cx({\n      [classes.tableRowHover]: hover,\n      [classes[rowColor + \"Row\"]]: rowColored,\n      [classes.tableStripedRow]: striped && key % 2 === 0\n    });\n\n    if (prop.total) {\n      return __jsx(TableRow, {\n        key: key,\n        hover: hover,\n        className: tableRowClasses\n      }, __jsx(TableCell, {\n        className: classes.tableCell,\n        colSpan: prop.colspan\n      }), __jsx(TableCell, {\n        className: classes.tableCell + \" \" + classes.tableCellTotal\n      }, \"Total\"), __jsx(TableCell, {\n        className: classes.tableCell + \" \" + classes.tableCellAmount\n      }, prop.amount), tableHead.length - (prop.colspan - 0 + 2) > 0 ? __jsx(TableCell, {\n        className: classes.tableCell,\n        colSpan: tableHead.length - (prop.colspan - 0 + 2)\n      }) : null);\n    }\n\n    if (prop.purchase) {\n      return __jsx(TableRow, {\n        key: key,\n        hover: hover,\n        className: tableRowClasses\n      }, __jsx(TableCell, {\n        className: classes.tableCell,\n        colSpan: prop.colspan\n      }), __jsx(TableCell, {\n        className: classes.tableCell + \" \" + classes.tableCellTotal\n      }, \"Total\"), __jsx(TableCell, {\n        className: classes.tableCell + \" \" + classes.tableCellAmount\n      }, prop.amount), __jsx(TableCell, {\n        className: classes.tableCell + \" \" + classes.right,\n        colSpan: prop.col.colspan\n      }, prop.col.text));\n    }\n\n    return __jsx(TableRow, {\n      key: key,\n      hover: hover,\n      className: classes.tableRow + \" \" + tableRowClasses\n    }, prop.map((prop, key) => {\n      const tableCellClasses = classes.tableCell + \" \" + cx({\n        [classes[colorsColls[coloredColls.indexOf(key)]]]: coloredColls.indexOf(key) !== -1,\n        [customCellClasses[customClassesForCells.indexOf(key)]]: customClassesForCells.indexOf(key) !== -1\n      });\n      return __jsx(TableCell, {\n        className: tableCellClasses,\n        key: key\n      }, prop);\n    }));\n  }))));\n}\nCustomTable.defaultProps = {\n  tableHeaderColor: \"gray\",\n  hover: false,\n  colorsColls: [],\n  coloredColls: [],\n  striped: false,\n  customCellClasses: [],\n  customClassesForCells: [],\n  customHeadCellClasses: [],\n  customHeadClassesForCells: []\n};","map":null,"metadata":{},"sourceType":"module"}